package HttpRocket_Git;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.lang.management.ManagementFactory;
import java.lang.management.RuntimeMXBean;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import static HttpRocket_Git.ProxyTask.picFilter;
import javax.swing.*;
//import javax.swing.SwingUtilities;

public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public MainWindow() {
        this.setSize(360, 320);
        this.setLocationRelativeTo(null);
        initComponents();
        StopButton.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PictureChoice = new javax.swing.ButtonGroup();
        ProxyChoice = new javax.swing.ButtonGroup();
        TitleDisplay = new javax.swing.JLabel();
        Keyword = new javax.swing.JLabel();
        KeywordField = new javax.swing.JTextField();
        Website = new javax.swing.JLabel();
        WebsiteField = new javax.swing.JTextField();
        Picture = new javax.swing.JLabel();
        PicBlockButton = new javax.swing.JRadioButton();
        PicPassButton = new javax.swing.JRadioButton();
        StartButton = new javax.swing.JButton();
        StopButton = new javax.swing.JButton();
        ProxyMode = new javax.swing.JLabel();
        HttpsButton = new javax.swing.JRadioButton();
        HttpButton = new javax.swing.JRadioButton();
        PortNumberDisplay = new javax.swing.JLabel();
        AboutButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(360, 320));
        setName("MainWindow"); // NOI18N
        setResizable(false);

        TitleDisplay.setFont(new java.awt.Font("微软雅黑", 1, 18)); // NOI18N
        TitleDisplay.setText("HTTP Rocket");

        Keyword.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        Keyword.setText("KeyWord:");

        KeywordField.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        KeywordField.setText("example;");
        KeywordField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                KeywordFieldMouseClicked(evt);
            }
        });
        KeywordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KeywordFieldActionPerformed(evt);
            }
        });

        Website.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        Website.setText("Website:");

        WebsiteField.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        WebsiteField.setText("*.example.*;");
        WebsiteField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                WebsiteFieldMouseClicked(evt);
            }
        });
        WebsiteField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WebsiteFieldActionPerformed(evt);
            }
        });

        Picture.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        Picture.setText("Picture:");

        PictureChoice.add(PicBlockButton);
        PicBlockButton.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        PicBlockButton.setText("Block");
        PicBlockButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PicBlockButtonActionPerformed(evt);
            }
        });

        PictureChoice.add(PicPassButton);
        PicPassButton.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        PicPassButton.setSelected(true);
        PicPassButton.setText("Pass");
        PicPassButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PicPassButtonActionPerformed(evt);
            }
        });

        StartButton.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        StartButton.setText("Start");
        StartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartButtonActionPerformed(evt);
            }
        });

        StopButton.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        StopButton.setText("Stop");
        StopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StopButtonActionPerformed(evt);
            }
        });

        ProxyMode.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        ProxyMode.setText("ProxyMode:");

        ProxyChoice.add(HttpsButton);
        HttpsButton.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        HttpsButton.setSelected(true);
        HttpsButton.setText("HTTP+HTTPS");
        HttpsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HttpsButtonActionPerformed(evt);
            }
        });

        ProxyChoice.add(HttpButton);
        HttpButton.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        HttpButton.setText("only HTTP");

        PortNumberDisplay.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        PortNumberDisplay.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        PortNumberDisplay.setText("Port Number 10240");

        AboutButton.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        AboutButton.setText("About");
        AboutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AboutButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addComponent(StartButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(StopButton)
                .addGap(78, 78, 78))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(Keyword)
                                .addComponent(Website, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addComponent(ProxyMode)
                            .addComponent(Picture))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(WebsiteField, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(KeywordField, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(HttpsButton)
                                    .addComponent(PicBlockButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(PicPassButton)
                                    .addComponent(HttpButton)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addComponent(PortNumberDisplay))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(141, 141, 141)
                        .addComponent(AboutButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(125, 125, 125)
                        .addComponent(TitleDisplay)))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TitleDisplay)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(KeywordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Keyword))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WebsiteField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Website))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PicBlockButton)
                    .addComponent(PicPassButton)
                    .addComponent(Picture))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ProxyMode)
                    .addComponent(HttpsButton)
                    .addComponent(HttpButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(StartButton)
                    .addComponent(StopButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PortNumberDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AboutButton)
                .addGap(28, 28, 28))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void WebsiteFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WebsiteFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_WebsiteFieldActionPerformed

    private void WebsiteFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_WebsiteFieldMouseClicked
        //left mouse click 
        String urls = WebsiteField.getText().trim();
        Vector<String> url_vector = new Vector();
        String[] url_str;
        if (!urls.equals("")) {
            url_str = urls.split(";");
        } else {
            url_str = urls.split("");
        }
        if (!url_str[0].equals("")) {
            for (int i = 0; i < url_str.length; i++) {
                url_vector.add(url_str[i]);
            }
        }
        new UrlWindow(WebsiteField, url_vector).setVisible(true);
    }//GEN-LAST:event_WebsiteFieldMouseClicked

    private void StartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartButtonActionPerformed
        // start
        if (PicBlockButton.isSelected()) {
            // start picture block
            ProxyTask.picFilter = true;
            System.out.println("Picture Block Started.");
        } else {
            ProxyTask.picFilter = false;
            System.out.println("Picture Block Stopped.");
        }

        if (HttpsButton.isSelected()) {
            //HTTPS + HTTP
            ProxyTask.isHttpsAndHttp = true;
            System.out.println("HTTPS + HTTP");
        } else {
            ProxyTask.isHttpsAndHttp = false;
            System.out.println("Only HTTP");
        }

        // get inputted URLs and filt
        String urls = WebsiteField.getText().trim();
        ProxyTask.filterUrls = urls;

        // get inputted keywords and filt
        String keywords = KeywordField.getText().trim();
        ProxyTask.filterKeys = keywords;

        StartButton.setEnabled(false);
        StopButton.setEnabled(true);
        ProxyTask.stopProgram = false;
        SocketProxy m = new SocketProxy();
        new Thread(m).start();
    }//GEN-LAST:event_StartButtonActionPerformed

    public static int getProcessID() {
        RuntimeMXBean runtimeMXBean = ManagementFactory.getRuntimeMXBean();
        //System.out.println(runtimeMXBean.getName());
        return Integer.valueOf(runtimeMXBean.getName().split("@")[0]).intValue();
    }

    private void StopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopButtonActionPerformed
        // try {                                         
        // stop the program
        StartButton.setEnabled(true);
        StopButton.setEnabled(false);

        ProxyTask.stopProgram = true;
//            Runtime runtime = Runtime.getRuntime();
//            int currentPid =  getProcessID();
//            //find pid
//            Process p = null;
//            try {
//                p = runtime.exec("cmd /c netstat -ano | findstr \"" + 9020 + "\"");
//            } catch (IOException ex) {
//                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
//            }
//            InputStream inputStream = p.getInputStream();
//            List<String> read = read(inputStream, "UTF-8");
//            if (read.size() == 0) {
//                System.out.println("can't find process using the port");
//                
//            } else {
//                for (String string : read) {
//                    System.out.println(string);
//                }
//                System.out.println("find" + read.size() + " of process, ready to terminate");
//            }
//            for (String line : read)
//            {
//                try {
//                    int offset = line.lastIndexOf(" ");
//                    String spid = line.substring(offset);
//                    spid = spid.replaceAll(" ", "");
//                    int pid = 0;
//                    try {
//                        pid = Integer.parseInt(spid);
//                        if(pid == currentPid)
//                            continue;
//                    } catch (NumberFormatException e) {
//                        System.out.println("get pid error:" + spid);
//                    }
//                    
//                    Process process = Runtime.getRuntime().exec("taskkill /F /pid "+pid+"");
//                    
//                } catch (IOException ex) {
//                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
//                }
//            }
//            
//        } catch (IOException ex) {
//            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
//        }

    }//GEN-LAST:event_StopButtonActionPerformed

    private void PicBlockButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PicBlockButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PicBlockButtonActionPerformed

    private void AboutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutButtonActionPerformed
        new AuthorWindow().setVisible(true);
    }//GEN-LAST:event_AboutButtonActionPerformed

    private void KeywordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KeywordFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_KeywordFieldActionPerformed

    private void HttpsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HttpsButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_HttpsButtonActionPerformed

    private void PicPassButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PicPassButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PicPassButtonActionPerformed

    private void KeywordFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_KeywordFieldMouseClicked
        //left mouse click 
        String keys = KeywordField.getText().trim();
        Vector<String> key_vector = new Vector();
        String[] key_str;
        if (!keys.equals("")) {
            key_str = keys.split(";");
        } else {
            key_str = keys.split("");
        }
        if (!key_str[0].equals("")) {
            for (int i = 0; i < key_str.length; i++) {
                key_vector.add(key_str[i]);
            }
        }
        new KeywordWindow(KeywordField, key_vector).setVisible(true);
    }//GEN-LAST:event_KeywordFieldMouseClicked

    /* used to stop port usage but not need now
    private List<String> read(InputStream in,String charset) throws IOException{
        List<String> data = new ArrayList<>();
        BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset));
        String line;
        while((line = reader.readLine()) != null){
            boolean validPort = validPort(line);
            if(validPort){
                data.add(line);
            }
        }
        reader.close();
        return data;
    }
  
    private boolean validPort(String str){
        Pattern pattern = Pattern.compile("^ *[a-zA-Z]+ +\\S+");
        Matcher matcher = pattern.matcher(str);

        matcher.find();
        String find = matcher.group();
        int spstart = find.lastIndexOf(":");
        find = find.substring(spstart + 1);
        
        int port = 0;
        try {
            port = Integer.parseInt(find);
        } catch (NumberFormatException e) {
            System.out.println("find wrong port number:" + find);
            return false;
        }
        return true;
    }
     */
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AboutButton;
    private javax.swing.JRadioButton HttpButton;
    private javax.swing.JRadioButton HttpsButton;
    private javax.swing.JLabel Keyword;
    private javax.swing.JTextField KeywordField;
    private javax.swing.JRadioButton PicBlockButton;
    private javax.swing.JRadioButton PicPassButton;
    private javax.swing.JLabel Picture;
    private javax.swing.ButtonGroup PictureChoice;
    private javax.swing.JLabel PortNumberDisplay;
    private javax.swing.ButtonGroup ProxyChoice;
    private javax.swing.JLabel ProxyMode;
    private javax.swing.JButton StartButton;
    private javax.swing.JButton StopButton;
    private javax.swing.JLabel TitleDisplay;
    private javax.swing.JLabel Website;
    private javax.swing.JTextField WebsiteField;
    // End of variables declaration//GEN-END:variables

}
